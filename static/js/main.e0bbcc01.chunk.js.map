{"version":3,"sources":["app/SearchBar.tsx","assets/noimage.jpg","app/SearchResult.tsx","assets/preloader.gif","app/Modal.tsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","id","type","placeholder","onInput","this","props","onSearchTextChange","bind","React","Component","SearchResult","cover_i","url","undefined","request","XMLHttpRequest","open","send","status","placeholderImage","newProps","newState","resultRow","name","author_name","join","imgSrc","getImage","title","firstYearOfPulish","Math","min","apply","publish_year","className","onClick","onRowClick","src","alt","Modal","state","isVisible","img","Image","bookData","document","getElementsByClassName","appendChild","getElementById","remove","onload","e","readyState","preloader","onCloseModal","isbn","years","sort","bookIsbns","closeModal","App","searchText","searchResult","isSearchResultActive","isModalActive","handleSearchTextChange","handleCloseModal","searchTextEvent","num","target","value","clearTimeout","lastCallTimer","setTimeout","getBooks","setState","resultBlock","preloaderUrl","classList","add","encodeURI","trim","result","fetch","then","response","json","data","docs","forEach","el","i","text","map","handleRowClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0bbcc01.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype searchBarProps = {\r\n    onSearchTextChange: Function\r\n}\r\n\r\nclass SearchBar extends React.Component <searchBarProps> {\r\n    render() {\r\n        return (\r\n            <input\r\n                id=\"searchInput\"\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n                onInput={this.props.onSearchTextChange.bind(this)}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SearchBar;","export default __webpack_public_path__ + \"static/media/noimage.e1ce751e.jpg\";","import React from 'react'\r\nimport '../styles/SearchResult.css'\r\nimport placeholderImage from '../assets/noimage.jpg'\r\ntype SearchResultProps = {\r\n    resultRow: BookData,\r\n    onRowClick: Function,\r\n}\r\n\r\n\r\ntype BookData = {\r\n    title: string,\r\n    author_name: Array<string>,\r\n    cover_i: number,\r\n    publish_year : Array<number>,\r\n    isbn : number,\r\n}\r\n\r\nclass SearchResult extends React.Component <SearchResultProps> {\r\n    getImage(cover_i:number) : string {\r\n        let url = \"https://covers.openlibrary.org/b/id/\"+cover_i+\"-S.jpg\";\r\n        if (cover_i!==undefined && cover_i>0) {\r\n            let request = new XMLHttpRequest();\r\n            request.open(\"GET\", url, false);\r\n            request.send(null);\r\n\r\n            if (request.status === 200) \r\n            {\r\n                return  url;\r\n            }\r\n        }\r\n        return placeholderImage;\r\n    }\r\n\r\n    shouldComponentUpdate(newProps : any, newState:any) : boolean {\r\n        return this.props.resultRow !== newProps.resultRow;\r\n    }\r\n\r\n    render() {\r\n        let name = this.props.resultRow.author_name?.join(', ');\r\n        let imgSrc = this.getImage(this.props.resultRow.cover_i);\r\n        let title = this.props.resultRow.title;\r\n        let firstYearOfPulish = Math.min.apply(null, this.props.resultRow.publish_year);\r\n        const rowClick = () =>this.props.onRowClick()\r\n        return(\r\n                <div className=\"resultRow\" onClick={rowClick}>\r\n                    <img className=\"resultRow__thumb\" src={imgSrc} alt={title}/>\r\n                    <div className=\"resultRow__info-block\">\r\n                        <p>Заголовок: {title}</p>\r\n                        {(name)&&(<p>Имя автора: {name}</p>)}\r\n                        <p>Год издательства: {firstYearOfPulish}</p>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchResult","export default __webpack_public_path__ + \"static/media/preloader.d3fbaf2b.gif\";","import React from 'react'\r\nimport placeholderImage from '../assets/noimage.jpg'\r\nimport preloader from '../assets/preloader.gif'\r\n\r\ninterface BookDataProps {\r\n    bookData: {\r\n        title: string,\r\n        author_name: Array<string>,\r\n        cover_i: number,\r\n        publish_year : Array<number>,\r\n        isbn : Array<number>\r\n    },\r\n    onCloseModal: Function\r\n}\r\n\r\nclass Modal extends React.Component <BookDataProps> {\r\n    state = {\r\n        isVisible : false\r\n    }\r\n\r\n    componentDidMount() {\r\n        let img = new Image();\r\n        img.id = \"largeCover\"\r\n        img.src = this.getImage(img, this.props.bookData.cover_i);\r\n        document.getElementsByClassName(\"modalWindow__image\")[0].appendChild(img);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.getElementById(\"largeCover\")?.remove();\r\n    }\r\n\r\n    getImage(img:HTMLImageElement, cover_i:number) : string {\r\n        let url = \"https://covers.openlibrary.org/b/id/\"+cover_i+\"-L.jpg\";\r\n        if (cover_i!==undefined && cover_i>0) {\r\n            let request = new XMLHttpRequest();\r\n            request.open(\"GET\", url, true);\r\n            request.onload = function (e) {\r\n                if (request.readyState === 4) {\r\n                  if (request.status === 200) {\r\n                    img!.src = url\r\n                  }\r\n                }\r\n              };\r\n        request.send(null);\r\n        } else {\r\n            return placeholderImage\r\n        }\r\n        return preloader;\r\n    }\r\n\r\n    closeModal() {\r\n        this.props.onCloseModal();\r\n    }\r\n    \r\n    render() {\r\n        const close = () => this.closeModal();\r\n        let {title , author_name, cover_i, publish_year, isbn} = this.props.bookData;\r\n        let name = author_name.join(\", \");\r\n        let years = publish_year.sort().join(\", \");\r\n        let bookIsbns = isbn.join(\", \");\r\n        return(\r\n            <div className=\"modalWindow\">\r\n                <div className=\"info-wrapper\">\r\n                    <div className=\"modalWindow__image\"></div>\r\n                    <div className=\"modalWindow__information\">\r\n                        <div className=\"information__row\">Заголовок: {title}</div>\r\n                        <div className=\"information__row\">Имя автора: {name}</div>\r\n                        <div className=\"information__row\">Годы издательства: {years}</div>\r\n                        <div className=\"information__row\">ISBN: {bookIsbns}</div>\r\n                    </div>\r\n                    <div className=\"modalWindow__close\" onClick={close}>X</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React from 'react';\nimport SearchBar from './app/SearchBar.tsx'\nimport SearchResult from './app/SearchResult.tsx'\nimport Modal from './app/Modal.tsx'\nimport preloaderUrl from './assets/preloader.gif'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchText: '',\n            searchResult: [],\n            bookData: {},\n            isSearchResultActive: false,\n            isModalActive: false\n        }\n        this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n    };\n\n    handleSearchTextChange(searchTextEvent, type = \"input\") {\n        let searchText, num;\n        if (type === \"input\") {\n            searchText = searchTextEvent.target.value;\n            num = 10;\n        } else {\n            searchText = searchTextEvent.value;\n            num = 30;\n        }\n        clearTimeout(this.lastCallTimer);\n        this.lastCallTimer = setTimeout(() => this.getBooks(searchText, num), 1000);\n    };\n\n    getBooks(searchText, num) {\n        if (!searchText) {\n            this.setState({\n                searchResult: [],\n                isSearchResultActive: false\n            })\n            return\n        };\n        this.setState({\n            searchText: searchText,\n            searchResult: [],\n            isSearchResultActive: true\n        })\n        let preloader = new Image();\n        let resultBlock = document.getElementsByClassName(\"resultBlock\")[0]\n        preloader.src = preloaderUrl;\n        preloader.classList.add(\"resultBlock__preloader\");\n        resultBlock.appendChild(preloader);\n        let url = \"https://openlibrary.org/search.json?q=\";\n        url += encodeURI(searchText.trim()) + \"*&fields=title,author_name,cover_i,publish_year,isbn&limit=\"+num;\n        let result = [];\n        fetch(url).then(response => response.json()).then(data => {\n            data.docs.forEach((el,i) => {\n                result[i] = el;\n            });\n            result = result!=\"\" ? result : \"empty\"\n            this.setState({\n                searchResult: result\n            });\n            preloader.remove(preloader);\n        });\n    }\n\n    handleRowClick(bookData) {\n        this.setState({\n            bookData: bookData,\n            isModalActive: true\n        });\n    }\n\n    handleCloseModal() {\n        this.setState({\n            isModalActive: false\n        })\n    }\n\n    render() {\n        let text = document.getElementById(\"searchInput\");\n        const searchBtnClick = () => this.handleSearchTextChange(text, \"click\");\n        return (\n            <>\n            <div className=\"contentBlock\">\n                <div className=\"searchWrapper\">\n                    <SearchBar\n                        onSearchTextChange = {this.handleSearchTextChange}\n                    />\n                    <button className=\"searchWrapper__btn\" onClick={searchBtnClick}>Искать</button>\n                </div>\n                {(this.state.isSearchResultActive)&&(\n                <div className=\"resultBlock\">\n                    {this.state.searchResult!==\"empty\"&&this.state.searchResult.map((resultRow) => (\n                        <SearchResult\n                            resultRow = {resultRow}\n                            onRowClick = {() => this.handleRowClick(resultRow)}\n                        />\n                    ))}\n                    {(this.state.searchResult===\"empty\")&&(<div className=\"resultBlock__notFound\">\n                        По запросу {this.state.searchText} книг не найдено =(\n                    </div>)}\n                </div>\n                )}\n            </div>\n            { (this.state.isModalActive) && (<Modal bookData = {this.state.bookData} onCloseModal = {this.handleCloseModal}/>)}\n            </>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}